'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getHistoryItem = exports.initState = undefined;

var _omitBy2 = require('lodash/omitBy');

var _omitBy3 = _interopRequireDefault(_omitBy2);

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _reducers;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.createNewState = createNewState;
exports.removeForwardItems = removeForwardItems;
exports.createNewHistory = createNewHistory;
exports.historyCreate = historyCreate;
exports.getLastKey = getLastKey;
exports.getFirstKey = getFirstKey;
exports.historyLearn = historyLearn;
exports.historyUpdate = historyUpdate;

var _capeRedux = require('cape-redux');

var _capeLodash = require('cape-lodash');

var _actions = require('./actions');

var _select = require('./select');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var initState = exports.initState = {
  activeKey: null,
  firstKey: null,
  key: {},
  lastKey: null,
  refresh: false
};
function createNewState(_ref, _ref2, key) {
  var firstKey = _ref.firstKey,
      refresh = _ref.refresh;
  var id = _ref2.id;

  return {
    activeKey: id,
    firstKey: firstKey || id,
    key: key,
    lastKey: id,
    refresh: refresh
  };
}

// Remove all entries with index equal or more when creating new history.
// This is because the browser forward button goes away after back, back, create.
function removeForwardItems(items, index) {
  return (0, _omitBy3.default)(items, function (item) {
    return item.index >= index;
  });
}
function createNewHistory(_ref3, payload, index) {
  var key = _ref3.key;

  return _extends({}, removeForwardItems(key, index), _defineProperty({}, payload.id, _extends({
    index: index
  }, payload)));
}
function historyCreate(state, payload) {
  var key = createNewHistory(state, payload, (0, _select.selectNextIndex)(state));
  return createNewState(state, payload, key);
}
function getLastKey(state, _ref4) {
  var id = _ref4.id,
      index = _ref4.index;

  if (!state.lastKey) return id;
  var lastIndex = (0, _select.getLastIndex)(state);
  if (index > lastIndex) return id;
  return state.lastKey;
}
function getFirstKey(state, _ref5) {
  var id = _ref5.id,
      index = _ref5.index;

  if (!state.firstKey) return id;
  var firstIndex = (0, _select.getFirstIndex)(state);
  if (index < firstIndex) return id;
  return state.firstKey;
}
function historyLearn(state, payload) {
  return {
    activeKey: payload.id,
    firstKey: getFirstKey(state, payload),
    key: (0, _capeLodash.set)(state.key, payload.id, payload),
    lastKey: getLastKey(state, payload),
    refresh: true
  };
}
function historyRestore(_ref6, _ref7) {
  var id = _ref7.id,
      lastVisit = _ref7.lastVisit;

  var key = _ref6.key,
      state = _objectWithoutProperties(_ref6, ['key']);

  return _extends({}, state, {
    activeKey: id,
    key: _extends({}, key, _defineProperty({}, id, _extends({}, key[id], {
      lastVisit: lastVisit
    })))
  });
}
var getHistoryItem = exports.getHistoryItem = function getHistoryItem(state, id) {
  return (0, _get3.default)(state, ['key', id], {});
};

function historyUpdate(state, payload) {
  return (0, _capeLodash.setIn)(['key', payload.id], state, (0, _capeLodash.merge)(getHistoryItem(payload.id, state), payload));
}
var reducers = (_reducers = {}, _defineProperty(_reducers, _actions.HISTORY_CREATE, historyCreate), _defineProperty(_reducers, _actions.HISTORY_LEARN, historyLearn), _defineProperty(_reducers, _actions.HISTORY_RESTORE, historyRestore), _defineProperty(_reducers, _actions.HISTORY_UPDATE, historyUpdate), _reducers);
/**
 * This reducer will update the state with the most recent history key and location.
 */
exports.default = (0, _capeRedux.createReducer)(reducers, initState);