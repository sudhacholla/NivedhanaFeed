'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HISTORY_HASH_CHANGE = exports.HISTORY_LEARN = exports.HISTORY_UPDATE = exports.HISTORY_CREATE = exports.HISTORY_RESTORE = undefined;

var _now2 = require('lodash/now');

var _now3 = _interopRequireDefault(_now2);

var _isString2 = require('lodash/isString');

var _isString3 = _interopRequireDefault(_isString2);

var _defaults2 = require('lodash/defaults');

var _defaults3 = _interopRequireDefault(_defaults2);

exports.restore = restore;
exports.create = create;
exports.update = update;
exports.createFromBrowser = createFromBrowser;
exports.hashChange = hashChange;

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * This action should be dispatched when you want to exchange state with a previous history.
 */
var HISTORY_RESTORE = exports.HISTORY_RESTORE = 'history/RESTORE';
function restore(id) {
  var pushState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  return {
    type: HISTORY_RESTORE,
    payload: {
      id: id,
      lastVisit: (0, _now3.default)()
    },
    meta: {
      pushState: pushState
    }
  };
}

var defaultLoc = {
  pathname: '',
  hash: '',
  search: ''
};
function getLocation(loc) {
  return (0, _defaults3.default)((0, _isString3.default)(loc) ? (0, _utils.parseUrl)(loc) : (0, _utils.getLocationObject)(loc), defaultLoc);
}

/**
 * This action should be dispatched when you want a new history entry.
 */
var HISTORY_CREATE = exports.HISTORY_CREATE = 'history/CREATE';
function create(_location, title) {
  var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var pushState = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

  return {
    type: HISTORY_CREATE,
    payload: {
      lastVisit: (0, _now3.default)(),
      title: title || '',
      location: getLocation(_location),
      id: id || (0, _utils.newId)()
    },
    meta: {
      pushState: pushState
    }
  };
}

var HISTORY_UPDATE = exports.HISTORY_UPDATE = 'history/UPDATE';
function update(id, _location, title) {
  return {
    type: HISTORY_UPDATE,
    payload: {
      id: id,
      title: title || '',
      location: getLocation(_location)
    }
  };
}

var HISTORY_LEARN = exports.HISTORY_LEARN = 'history/HISTORY_LEARN';
function createFromBrowser(historyState) {
  return {
    type: HISTORY_LEARN,
    payload: historyState
  };
}

/**
 * Currently this is private. Called when user changes hash in address bar.
 */
var HISTORY_HASH_CHANGE = exports.HISTORY_HASH_CHANGE = 'history/HISTORY_HASH_CHANGE';
function hashChange(hash) {
  return {
    type: HISTORY_HASH_CHANGE,
    payload: {
      hash: hash,
      id: (0, _utils.newId)()
    }
  };
}