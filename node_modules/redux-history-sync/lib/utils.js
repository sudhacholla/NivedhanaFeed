'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.newId = newId;
exports.locationSerialize = locationSerialize;
exports.getLocationObject = getLocationObject;
exports.parseUrlBrowser = parseUrlBrowser;
exports.parseUrlNode = parseUrlNode;
exports.parseUrl = parseUrl;

var _identity = require('lodash/identity');

var _identity2 = _interopRequireDefault(_identity);

var _pick = require('lodash/pick');

var _pick2 = _interopRequireDefault(_pick);

var _pickBy = require('lodash/pickBy');

var _pickBy2 = _interopRequireDefault(_pickBy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* global window */

var hasWindowGlobal = (typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object';
var hasRequireGlobal = typeof require === 'function';

function newId() {
  return Math.random().toString(36).substr(7);
}
/**
 * Serialize location object into a string like it shows up in the address bar.
 */
function locationSerialize(_ref) {
  var _ref$pathname = _ref.pathname,
      pathname = _ref$pathname === undefined ? '' : _ref$pathname,
      _ref$search = _ref.search,
      search = _ref$search === undefined ? '' : _ref$search,
      _ref$hash = _ref.hash,
      hash = _ref$hash === undefined ? '' : _ref$hash;

  return '' + pathname + search + hash;
}
// Internal API.
function getLocationObject(_location) {
  var loc = (0, _pick2.default)(_location, 'pathname', 'hash', 'search', 'origin', 'protocol', 'port', 'hostname');
  return (0, _pickBy2.default)(loc, _identity2.default);
}
function parseUrlBrowser(string) {
  var url = window.document.createElement('a');
  url.href = string;
  return getLocationObject(url);
}
function parseUrlNode(string) {
  var _require = require('url'),
      parse = _require.parse; // eslint-disable-line global-require


  return getLocationObject(parse(string));
}
function parseUrl(string) {
  if (!string) return {};
  if (hasWindowGlobal) return parseUrlBrowser(string);
  if (hasRequireGlobal) return parseUrlNode(string);
  throw new Error('No url processor function found.');
}