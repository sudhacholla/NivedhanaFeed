'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createPopListener = createPopListener;
exports.changeBrowserHistory = changeBrowserHistory;
exports.createHistoryListener = createHistoryListener;
exports.createHashListener = createHashListener;
exports.syncHistoryToStore = syncHistoryToStore;
exports.syncStoreHistory = syncStoreHistory;
exports.default = syncHistoryWithStore;

var _actions = require('./actions');

var _select = require('./select');

var _selectors = require('./selectors');

var _utils = require('./utils');

function createPopListener(listener, reset) {
  return function (event) {
    // console.log(event)
    if ((0, _selectors.browserHasHistory)(event)) {
      listener(event.state);
    } else if (reset) {
      reset();
    }
  };
}
// New history address bar URL. Browser won't attempt to load this.
// https://developer.mozilla.org/en-US/docs/Web/API/History_API
// The state object can be anything that can be serialized under 640k.
// reduxHistory is the full state.history object.
function changeBrowserHistory(reduxHistory, changeState) {
  var activeHistory = (0, _select.browserHistory)(reduxHistory);
  var locationStr = (0, _utils.locationSerialize)(activeHistory.location);
  return changeState(activeHistory, activeHistory.title, locationStr);
}

function createHistoryListener(store, selectHistory, replaceState) {
  return function (windowHistory) {
    var reduxHistory = selectHistory(store.getState());
    var storeHasKey = reduxHistory.key[windowHistory.id];
    // Back/Forward after a page refresh.
    if (!storeHasKey) return store.dispatch((0, _actions.createFromBrowser)(windowHistory));
    // Change came from here.
    if ((0, _selectors.keyMatch)(reduxHistory, windowHistory)) {
      // console.log('redux update loop')
      return changeBrowserHistory(reduxHistory, replaceState);
    }
    // console.log('history restore', reduxHistory.activeKey, windowHistory.id)
    // Back/Forward
    return store.dispatch((0, _actions.restore)(windowHistory.id, false));
  };
}
function createHashListener(store, selectHistory, getHash) {
  return function () {
    var keyState = (0, _select.selectActiveKey)(selectHistory(store.getState()));
    var stateHash = keyState.location.hash;
    var browserHash = getHash();
    if (browserHash !== stateHash) {
      store.dispatch((0, _actions.hashChange)(browserHash));
    }
  };
}
function syncHistoryToStore(store, selectHistory, _window) {
  var replaceState = _window.history.replaceState.bind(_window.history);
  var handleHistoryChange = createHistoryListener(store, selectHistory, replaceState);
  function getHash() {
    return _window.location.hash;
  }
  var hashChanges = createHashListener(store, selectHistory, getHash);
  // Listen for browser history forward/back changes.
  var handlePopState = createPopListener(handleHistoryChange, hashChanges);
  _window.addEventListener('popstate', handlePopState);
}

// Subscribe to store. Save new state to history key index.
function syncStoreHistory(store, history, selectHistory) {
  var previousHistory = {};
  function handleStoreChange() {
    var reduxHistory = selectHistory(store.getState());
    if (reduxHistory === previousHistory) return 0;
    previousHistory = reduxHistory;
    // Look for redux change.
    if ((0, _select.historyMatch)(reduxHistory, history.state)) {
      if (!(0, _select.lengthMatch)(reduxHistory, history.state)) {
        // console.log('replace window history length value.')
        changeBrowserHistory(reduxHistory, history.replaceState.bind(history));
      }
      return 1;
    }
    // Save new state to history key index.
    if ((0, _selectors.isNewHistory)(reduxHistory, history.state)) {
      // console.log('new history')
      changeBrowserHistory(reduxHistory, history.pushState.bind(history));
      return 2;
    }
    // What is the index of the history key in the Redux store?
    var storeIndex = (0, _select.getKeyIndex)(reduxHistory);
    // What is the index of the browser?
    var browserIndex = history.state.index;
    // Tell browser to move forward or backward based on activeKey changes.
    // How far back or forward do we need to move the browser?
    var goBy = storeIndex - browserIndex;
    // console.log('Move browser history', storeIndex, browserIndex, goBy)
    history.go(goBy);
    return 3;
  }
  store.subscribe(handleStoreChange);
}

/**
 * This function saves and restores state with history navigation changes.
 * Externally available.
 */
function syncHistoryWithStore(store, _window) {
  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      _ref$selectHistory = _ref.selectHistory,
      selectHistory = _ref$selectHistory === undefined ? _selectors.selectHistoryState : _ref$selectHistory;

  var historyState = selectHistory(store.getState());
  // Ensure that the reducer is mounted on the store and functioning properly.
  if (!historyState.activeKey) {
    // console.error(selectHistory(store.getState()))
    throw new Error('Expected the history state activeKey to be available as `state.history` ' + 'or as the custom expression you can specify as `selectHistoryState` ' + 'in the `syncHistoryWithStore()` options. ' + 'Ensure you have added the `historyReducer` to your store\'s ' + 'reducers via `combineReducers` or whatever method you use to isolate ' + 'your reducers.');
  }
  // We want to make sure the window history state matches Redux initially.
  changeBrowserHistory(historyState, _window.history.replaceState.bind(_window.history));
  // Sync Redux -> Browser History
  syncStoreHistory(store, _window.history, selectHistory);
  // Sync Browser History -> Redux
  syncHistoryToStore(store, selectHistory, _window);
}