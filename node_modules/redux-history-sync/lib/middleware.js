'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _flow3 = require('lodash/fp/flow');

var _flow4 = _interopRequireDefault(_flow3);

exports.default = middleware;

var _utils = require('./utils');

var _actions = require('./actions');

var _select = require('./select');

var _selectors = require('./selectors');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * This middleware:
 *   Calls pushState() with location string on HISTORY_CREATE.
 */
function middleware(history) {
  var selectHistory = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _selectors.selectHistoryState;

  return function (store) {
    return function (next) {
      return function (action) {
        // A new history entry was added to browser, [sigh] mirror in Redux.
        if (action.type === _actions.HISTORY_HASH_CHANGE) {
          // We need all the info from current key.
          var _flow2 = (0, _flow4.default)(selectHistory, _select.selectActiveKey)(store.getState()),
              location = _flow2.location,
              title = _flow2.title;

          var _action$payload = action.payload,
              hash = _action$payload.hash,
              key = _action$payload.key;
          // Overwrite old location hash with new one.

          location.hash = hash;
          // The location string that will be replaced in the browser.
          // Should be same as it already is.
          var newLocationString = (0, _utils.locationSerialize)(location);
          history.replaceState({ key: key, location: location, title: title }, title, newLocationString);
          var newAction = (0, _actions.create)(location, title, key, false);
          newAction.meta.hashChange = true;
          newAction.meta.replacedState = true;
          return next(newAction);
        }
        return next(action);
      };
    };
  };
}