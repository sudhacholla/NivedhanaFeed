'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _props = require('./props');

var _deepEqual = require('deep-equal');

var _deepEqual2 = _interopRequireDefault(_deepEqual);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ReactSync = function (_Component) {
  _inherits(ReactSync, _Component);

  function ReactSync() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ReactSync);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ReactSync.__proto__ || Object.getPrototypeOf(ReactSync)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      // The pending promise
      promise: null,

      // The data returned from handling the response
      data: null,

      // The error that occurred during the fetch
      error: null
    }, _this._fetchKey = 0, _temp), _possibleConstructorReturn(_this, _ret);
  }

  // the incremented # of the fetch we are working on - used to ignore previous requests


  _createClass(ReactSync, [{
    key: 'fetchData',
    value: function fetchData(_ref2) {
      var _this2 = this;

      var url = _ref2.url,
          params = _ref2.params,
          headers = _ref2.headers,
          toQueryString = _ref2.toQueryString,
          toData = _ref2.toData;

      // this is the only fetch that matters
      var myFetchKey = ++this._fetchKey;

      // only updates state as long as the promise is not cancelled
      var updateState = function updateState(state) {
        if (myFetchKey === _this2._fetchKey) {
          _this2.setState(state);
        }
      };

      this.setState({
        // always clear old errors, never clear old responses
        error: null,

        promise: fetch(url + '?' + toQueryString(params), { headers: headers }).then(toData).then(function (data) {
          return updateState({ data: data, promise: null });
        }).catch(function (error) {
          return updateState({ error: error, promise: null });
        })
      });
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.fetchData(this.props);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      // if the url, parameters, or headers changed, we need to start over
      if (!(0, _deepEqual2.default)({ url: nextProps.url, params: nextProps.params, headers: nextProps.header }, { url: this.props.url, params: this.props.params, headers: this.props.headers })) {
        this.fetchData(nextProps);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var children = this.props.children;


      return children(this.state);
    }
  }]);

  return ReactSync;
}(_react.Component);

ReactSync.propTypes = _props.propTypes;
ReactSync.defaultProps = _props.defaultProps;
exports.default = ReactSync;
;