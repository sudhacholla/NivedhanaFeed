"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = paginate;
var ActionTypes = exports.ActionTypes = {
  CHANGE_PAGE_NUMBER: '@@redux-pagination/CHANGE_PAGE_NUMBER',
  GET_PAGE: '@@redux-pagination/GET_PAGE',
  GET_PAGE_SUCCESS: '@@redux-pagination/GET_PAGE_SUCCESS',
  GET_PAGE_FAIL: '@@redux-pagination/GET_PAGE_FAIL'
};

var initActionCreators = exports.initActionCreators = function initActionCreators(config) {
  var path = config.path;
  var limit = config.limit || 50;

  return {
    getPage: function getPage(pageNumber) {
      return function (dispatch) {
        // Change the page number
        dispatch({
          type: ActionTypes.CHANGE_PAGE_NUMBER,
          result: pageNumber
        });

        // Get the page
        return dispatch({
          types: [ActionTypes.GET_PAGE, ActionTypes.GET_PAGE_SUCCESS, ActionTypes.GET_PAGE_FAIL],
          promise: function promise(client) {
            return client.get(path, {
              params: {
                page: pageNumber,
                limit: limit
              }
            });
          }
        });
      };
    }
  };
};

// higher order reducer
function paginate(reducer) {
  var initialState = _extends({}, reducer(undefined, {}), {
    loadingPage: false,
    initialLoad: false,
    currentPage: 1,
    totalPages: 1,
    fail: {},
    list: []
  });

  return function () {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
    var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    switch (action.type) {
      case ActionTypes.CHANGE_PAGE_NUMBER:
        return _extends({}, state, {
          fail: {},
          currentPage: action.result
        });
      case ActionTypes.GET_PAGE:
        return _extends({}, state, {
          fail: {},
          loadingPage: true
        });
      case ActionTypes.GET_PAGE_SUCCESS:
        return _extends({}, state, {
          fail: {},
          loadingPage: false,
          initialLoad: true,
          list: action.result.list,
          totalPages: action.result.totalPages
        });
      case ActionTypes.GET_PAGE_FAIL:
        return _extends({}, state, {
          initialLoad: true,
          fail: action.result
        });
      default:
        return reducer(state, action);
    }
  };
}