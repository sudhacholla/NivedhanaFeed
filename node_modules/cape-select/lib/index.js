'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAll = exports.getProp = exports.selectProp = exports.getProps = exports.boolSelector = undefined;

var _unary2 = require('lodash/unary');

var _unary3 = _interopRequireDefault(_unary2);

var _spread2 = require('lodash/spread');

var _spread3 = _interopRequireDefault(_spread2);

var _property2 = require('lodash/property');

var _property3 = _interopRequireDefault(_property2);

var _partial2 = require('lodash/partial');

var _partial3 = _interopRequireDefault(_partial2);

var _over2 = require('lodash/over');

var _over3 = _interopRequireDefault(_over2);

var _nthArg2 = require('lodash/nthArg');

var _nthArg3 = _interopRequireDefault(_nthArg2);

var _mapValues2 = require('lodash/mapValues');

var _mapValues3 = _interopRequireDefault(_mapValues2);

var _isFunction2 = require('lodash/isFunction');

var _isFunction3 = _interopRequireDefault(_isFunction2);

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _flowRight2 = require('lodash/flowRight');

var _flowRight3 = _interopRequireDefault(_flowRight2);

var _flow2 = require('lodash/flow');

var _flow3 = _interopRequireDefault(_flow2);

var _curry2 = require('lodash/curry');

var _curry3 = _interopRequireDefault(_curry2);

var _at2 = require('lodash/at');

var _at3 = _interopRequireDefault(_at2);

exports.getSelect = getSelect;
exports.getObjIds = getObjIds;
exports.select = select;
exports.simpleSelector = simpleSelector;
exports.structuredSelector = structuredSelector;
exports.thunkSelect = thunkSelect;

var _defaultTo = require('lodash/fp/defaultTo');

var _defaultTo2 = _interopRequireDefault(_defaultTo);

var _capeLodash = require('cape-lodash');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Select something and turn it into boolean. boolSelector(selector)(state)
var boolSelector = exports.boolSelector = (0, _partial3.default)(_flowRight3.default, _capeLodash.toBool);

// Returns the 2nd arg.

// import fpGet from 'lodash/fp/get'
var getProps = exports.getProps = (0, _nthArg3.default)(1);
var selectProp = exports.selectProp = (0, _flow3.default)(_property3.default, (0, _partial3.default)(_flow3.default, getProps));
var getProp = exports.getProp = selectProp;

// Returns the collection property at key as determined by idSelector.
function getSelect(collectionSelector, idSelector) {
  return (0, _flow3.default)((0, _over3.default)([collectionSelector, idSelector]), (0, _spread3.default)(_get3.default));
}
var getAll = exports.getAll = (0, _curry3.default)(_at3.default, 2);
function getObjIds(collection, objIds) {
  return (0, _mapValues3.default)(objIds, (0, _unary3.default)(getAll(collection)));
}
// Send arg to selector then get property at path. Apply defaultValue.
function select(selector, path) {
  var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  if (!(0, _isFunction3.default)(selector)) throw new Error('Selector must be a function.');
  return (0, _flow3.default)(selector, (0, _property3.default)(path), (0, _defaultTo2.default)(defaultValue));
}

// See createSelector(). This has no memoization.
function simpleSelector() {
  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
    funcs[_key] = arguments[_key];
  }

  var last = funcs.pop();
  return (0, _flow3.default)((0, _over3.default)(funcs), (0, _spread3.default)(last));
}
function structuredSelector(object) {
  return function () {
    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return (0, _mapValues3.default)(object, function (selector) {
      return (0, _isFunction3.default)(selector) ? selector.apply(undefined, args) : selector;
    });
  };
}
function thunkSelect(selector, props) {
  if (!(0, _isFunction3.default)(selector)) throw new Error('selector must be a function');
  return function (dispatch, getState) {
    return selector(getState(), props);
  };
}