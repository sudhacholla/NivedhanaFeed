var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

import { LOCATION_CHANGE } from './constants';

var getInitialState = {
  pathname: '/',
  search: '',
  queries: {},
  hash: ''
};

export var routerReducer = function routerReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getInitialState;
  var action = arguments[1];

  switch (action.type) {
    case LOCATION_CHANGE:
      return _extends({}, state, action.payload);
    default:
      return state;
  }
};